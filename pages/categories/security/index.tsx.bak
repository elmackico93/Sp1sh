// pages/categories/security/index.tsx
import React, { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import { motion, AnimatePresence, useReducedMotion } from 'framer-motion';
import { 
  FiShield, FiLock, FiServer, FiKey, FiUsers, FiAlertTriangle,
  FiMonitor, FiFileText, FiCheckCircle, FiSearch, FiFilter, FiRefreshCw, 
  FiChevronDown, FiChevronUp, FiChevronRight, FiHelpCircle, FiClock, FiStar, FiDownload,
  FiX, FiList, FiGrid
} from 'react-icons/fi';

import { useScripts } from '../../../context/ScriptsContext';
import { Script } from '../../../mocks/scripts';
import { ScriptCard } from '../../../components/scripts/ScriptCard';
import { LoadingPlaceholder } from '../../../components/ui/LoadingPlaceholder';
import { EnhancedSearch } from '../../../components/search/EnhancedSearch';

// Types for security subcategories
type SecurityLevel = 'critical' | 'high' | 'medium' | 'low';

interface SecuritySubcategory {
  id: string;
  name: string;
  description: string;
  icon: React.ReactNode;
  path: string;
  level: SecurityLevel;
  tags: string[];
}

// Define security subcategories with enhanced metadata
const securitySubcategories: SecuritySubcategory[] = [
  {
    id: 'hardening',
    name: 'System Hardening',
    description: 'Scripts to strengthen system security posture, reduce attack surface, and eliminate vulnerabilities.',
    icon: <FiShield className="w-6 h-6" />,
    path: '/categories/security/hardening',
    level: 'high',
    tags: ['hardening', 'lockdown', 'security-baseline', 'compliance']
  },
  {
    id: 'firewalls',
    name: 'Firewall & IPS',
    description: 'Network traffic control, packet filtering, and intrusion prevention system configurations.',
    icon: <FiServer className="w-6 h-6" />,
    path: '/categories/security/firewall-ips',
    level: 'critical',
    tags: ['firewall', 'iptables', 'network-security', 'intrusion-prevention']
  },
  {
    id: 'encryption',
    name: 'Encryption & Data Protection',
    description: 'File and disk encryption, data-at-rest protection, and secure communication scripts.',
    icon: <FiLock className="w-6 h-6" />,
    path: '/categories/security/encryption',
    level: 'high',
    tags: ['encryption', 'ssl', 'tls', 'data-protection']
  },
  {
    id: 'authentication',
    name: 'Authentication & Access Control',
    description: 'Strong authentication mechanisms, access control enforcement, and privilege management.',
    icon: <FiKey className="w-6 h-6" />,
    path: '/categories/security/authentication',
    level: 'high', 
    tags: ['authentication', 'mfa', 'rbac', 'access-control']
  },
  {
    id: 'monitoring',
    name: 'Security Monitoring & Auditing',
    description: 'Scripts for log collection, security event monitoring, and compliance auditing.',
    icon: <FiMonitor className="w-6 h-6" />,
    path: '/categories/security/monitoring',
    level: 'medium',
    tags: ['siem', 'logging', 'auditing', 'monitoring']
  },
  {
    id: 'incident-response',
    name: 'Incident Response',
    description: 'Tools for security incident handling, evidence collection, and breach containment.',
    icon: <FiAlertTriangle className="w-6 h-6" />,
    path: '/categories/security/incident-response',
    level: 'critical',
    tags: ['incident', 'forensics', 'response', 'containment']
  }
];

// Security tips for the resource section
const securityTips = [
  {
    title: "Principle of Least Privilege",
    description: "Grant minimal access rights required for users to perform their functions.",
    icon: <FiUsers className="w-5 h-5" />
  },
  {
    title: "Defense in Depth",
    description: "Implement multiple layers of security controls throughout your systems.",
    icon: <FiShield className="w-5 h-5" />
  },
  {
    title: "Regular Security Audits",
    description: "Perform scheduled security reviews to identify and mitigate vulnerabilities.",
    icon: <FiFileText className="w-5 h-5" />
  },
  {
    title: "Keep Systems Updated",
    description: "Apply security patches promptly to protect against known vulnerabilities.",
    icon: <FiRefreshCw className="w-5 h-5" />
  }
];

// Animation variants for smooth transitions
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      when: "beforeChildren",
      staggerChildren: 0.1
    }
  }
};

const itemVariants = {
  hidden: { y: 20, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      type: "spring",
      stiffness: 300,
      damping: 24
    }
  }
};

// Helper function to get styling based on security level
const getLevelStyles = (level: SecurityLevel) => {
  switch (level) {
    case 'critical':
      return {
        bg: 'bg-red-500/10',
        border: 'border-red-500',
        text: 'text-red-600 dark:text-red-500',
        ring: 'ring-red-500',
        badge: 'bg-red-500 text-white'
      };
    case 'high':
      return {
        bg: 'bg-orange-500/10',
        border: 'border-orange-500',
        text: 'text-orange-600 dark:text-orange-500',
        ring: 'ring-orange-500',
        badge: 'bg-orange-500 text-white'
      };
    case 'medium':
      return {
        bg: 'bg-yellow-500/10',
        border: 'border-yellow-500',
        text: 'text-yellow-600 dark:text-yellow-500',
        ring: 'ring-yellow-500',
        badge: 'bg-yellow-500 text-gray-900'
      };
    case 'low':
    default:
      return {
        bg: 'bg-blue-500/10',
        border: 'border-blue-500',
        text: 'text-blue-600 dark:text-blue-500',
        ring: 'ring-blue-500',
        badge: 'bg-blue-500 text-white'
      };
  }
};

export default function SecurityCategoryPage() {
  const router = useRouter();
  const { allScripts, isLoading } = useScripts();
  const [securityScripts, setSecurityScripts] = useState<Script[]>([]);
  const [featuredScripts, setFeaturedScripts] = useState<Script[]>([]);
  const [filteredScripts, setFilteredScripts] = useState<Script[]>([]);
  const [activeSubcategory, setActiveSubcategory] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [expandedInfo, setExpandedInfo] = useState(false);
  const [filterOS, setFilterOS] = useState<'all' | 'linux' | 'windows' | 'macos' | 'cross-platform'>('all');
  const [showRecommendations, setShowRecommendations] = useState(true);
  const [showResources, setShowResources] = useState(false);
  const shouldReduceMotion = useReducedMotion();
  
  const contentRef = useRef<HTMLDivElement>(null);
  const totalScriptsCount = securityScripts.length;
  
  // Filter scripts by subcategory, OS, and search query
  useEffect(() => {
    if (allScripts.length > 0) {
      // Get all security-related scripts
      const security = allScripts.filter(script => 
        script.category === 'security' || 
        script.tags.some(tag => 
          ['security', 'firewall', 'encryption', 'compliance', 'authentication'].includes(tag)
        )
      );
      
      setSecurityScripts(security);
      
      // Set featured scripts (top 3 by downloads)
      setFeaturedScripts(
        [...security]
          .sort((a, b) => b.downloads - a.downloads)
          .slice(0, 3)
      );
      
      // Apply filters
      let filtered = [...security];
      
      // Filter by subcategory if active
      if (activeSubcategory) {
        const subcategory = securitySubcategories.find(sub => sub.id === activeSubcategory);
        if (subcategory) {
          filtered = filtered.filter(script => 
            script.tags.some(tag => subcategory.tags.includes(tag))
          );
        }
      }
      
      // Filter by OS
      if (filterOS !== 'all') {
        filtered = filtered.filter(script => 
          script.os === filterOS || script.os === 'cross-platform'
        );
      }
      
      // Filter by search query
      if (searchQuery) {
        const query = searchQuery.toLowerCase();
        filtered = filtered.filter(script => 
          script.title.toLowerCase().includes(query) ||
          script.description.toLowerCase().includes(query) ||
          script.tags.some(tag => tag.toLowerCase().includes(query))
        );
      }
      
      setFilteredScripts(filtered);
    }
  }, [allScripts, activeSubcategory, filterOS, searchQuery]);
  
  // Scroll to content when changing filters
  useEffect(() => {
    if (activeSubcategory && contentRef.current) {
      const scrollOptions: ScrollIntoViewOptions = {
        behavior: shouldReduceMotion ? 'auto' : 'smooth',
        block: 'start'
      };
      contentRef.current.scrollIntoView(scrollOptions);
    }
  }, [activeSubcategory, shouldReduceMotion]);
  
  // Handle search input
  const handleSearch = (query: string) => {
    setSearchQuery(query);
  };
  
  // Clear all filters
  const clearFilters = () => {
    setActiveSubcategory(null);
    setFilterOS('all');
    setSearchQuery('');
  };
  
  // Toggle subcategory filter
  const toggleSubcategory = (subcategoryId: string) => {
    setActiveSubcategory(prev => prev === subcategoryId ? null : subcategoryId);
  };

  if (isLoading) {
    return <LoadingPlaceholder />;
  }

  return (
    <>
      <Head>
        <title>Security Scripts | Sp1sh</title>
        <meta name="description" content="Find and use expert-verified security scripts for system hardening, firewall configuration, encryption, and security monitoring." />
        <meta name="keywords" content="security scripts, system hardening, firewall scripts, encryption tools, authentication scripts, security monitoring" />
      </Head>
      
      {/* Enhanced Hero Section */}
      <section className="relative bg-gradient-to-br from-gray-900 to-gray-800 text-white overflow-hidden">
        {/* Background pattern */}
        <div className="absolute inset-0 opacity-10 z-0">
          <svg className="w-full h-full" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
            <defs>
              <pattern id="securityPattern" x="0" y="0" width="20" height="20" patternUnits="userSpaceOnUse">
                <path d="M0,10 L20,10 M10,0 L10,20" stroke="currentColor" strokeWidth="0.5" />
              </pattern>
            </defs>
            <rect width="100%" height="100%" fill="url(#securityPattern)" />
          </svg>
        </div>
        
        {/* Hero content */}
        <div className="container mx-auto px-4 py-16 md:py-24 relative z-10">
          <div className="max-w-4xl mx-auto text-center">
            <motion.div
              initial={{ y: 20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ duration: 0.5 }}
              className="inline-flex items-center px-3 py-1 rounded-full bg-white/10 backdrop-blur-sm text-sm mb-6"
            >
              <span className="mr-2">🔒</span>
              <span>Security Scripts ({totalScriptsCount})</span>
            </motion.div>
            
            <motion.h1
              initial={{ y: 20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ duration: 0.5, delay: 0.1 }}
              className="text-4xl md:text-5xl lg:text-6xl font-bold mb-6"
            >
              Secure Your Systems with <span className="text-primary-light">Expert Scripts</span>
            </motion.h1>
            
            <motion.p
              initial={{ y: 20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ duration: 0.5, delay: 0.2 }}
              className="text-xl text-gray-300 mb-8 max-w-3xl mx-auto"
            >
              Discover our library of security scripts for system hardening, firewall configuration, encryption, and monitoring. All scripts are verified for effectiveness and safety.
            </motion.p>
            
            <motion.div
              initial={{ y: 20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ duration: 0.5, delay: 0.3 }}
              className="flex flex-wrap justify-center gap-4"
            >
              <a href="#security-areas" className="btn btn-primary">
                Explore Security Categories
              </a>
              <Link href="/add-script" className="btn btn-secondary bg-white/10 text-white hover:bg-white/20">
                Contribute a Script
              </Link>
            </motion.div>
          </div>
        </div>
        
        {/* Wave separator */}
        <div className="absolute bottom-0 left-0 right-0">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 120" fill="currentColor" className="text-gray-50 dark:text-gray-900">
            <path d="M0,64L80,69.3C160,75,320,85,480,80C640,75,800,53,960,48C1120,43,1280,53,1360,58.7L1440,64L1440,120L1360,120C1280,120,1120,120,960,120C800,120,640,120,480,120C320,120,160,120,80,120L0,120Z"></path>
          </svg>
        </div>
      </section>
      
      <div className="container mx-auto px-4 py-8">
        {/* Enhanced Search with Filters */}
        <section className="mb-12 -mt-20 relative z-20">
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-xl border border-gray-200 dark:border-gray-700 p-6">
            <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
              Find Security Scripts
            </h2>
            
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-grow">
                <EnhancedSearch 
                  placeholder="Search security scripts..."
                  onSearch={handleSearch}
                  variant="expanded"
                  showFilters={false}
                  maxResults={5}
                />
              </div>
              
              <div className="flex flex-wrap gap-2 items-center">
                <div className="text-sm text-gray-500 dark:text-gray-400 mr-2">Filter OS:</div>
                <button
                  onClick={() => setFilterOS('all')}
                  className={`px-3 py-1.5 text-xs font-medium rounded-md ${
                    filterOS === 'all'
                      ? 'bg-primary text-white'
                      : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                  }`}
                >
                  All
                </button>
                <button
                  onClick={() => setFilterOS('linux')}
                  className={`px-3 py-1.5 text-xs font-medium rounded-md flex items-center gap-1 ${
                    filterOS === 'linux'
                      ? 'bg-linux-green text-white'
                      : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                  }`}
                >
                  <span>🐧</span> Linux
                </button>
                <button
                  onClick={() => setFilterOS('windows')}
                  className={`px-3 py-1.5 text-xs font-medium rounded-md flex items-center gap-1 ${
                    filterOS === 'windows'
                      ? 'bg-windows-blue text-white'
                      : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                  }`}
                >
                  <span>🪟</span> Windows
                </button>
                <button
                  onClick={() => setFilterOS('macos')}
                  className={`px-3 py-1.5 text-xs font-medium rounded-md flex items-center gap-1 ${
                    filterOS === 'macos'
                      ? 'bg-gray-800 text-white dark:bg-gray-600'
                      : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                  }`}
                >
                  <span>🍎</span> macOS
                </button>
                
                {(activeSubcategory || filterOS !== 'all' || searchQuery) && (
                  <button
                    onClick={clearFilters}
                    className="ml-2 px-3 py-1.5 text-xs font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md border border-gray-200 dark:border-gray-600 flex items-center gap-1"
                  >
                    <FiX className="w-3 h-3" />
                    Clear Filters
                  </button>
                )}
              </div>
            </div>
            
            {/* Active filters */}
            {(activeSubcategory || filterOS !== 'all' || searchQuery) && (
              <div className="mt-4 flex flex-wrap items-center gap-2">
                <span className="text-sm text-gray-500 dark:text-gray-400">Active filters:</span>
                
                {activeSubcategory && (
                  <span className="px-2 py-1 bg-primary/10 text-primary dark:text-primary-light text-xs rounded-md flex items-center">
                    Category: {securitySubcategories.find(s => s.id === activeSubcategory)?.name}
                    <button 
                      onClick={() => setActiveSubcategory(null)}
                      className="ml-1 text-primary/70 hover:text-primary"
                    >
                      <FiX className="w-3 h-3" />
                    </button>
                  </span>
                )}
                
                {filterOS !== 'all' && (
                  <span className="px-2 py-1 bg-primary/10 text-primary dark:text-primary-light text-xs rounded-md flex items-center">
                    OS: {filterOS.charAt(0).toUpperCase() + filterOS.slice(1)}
                    <button 
                      onClick={() => setFilterOS('all')}
                      className="ml-1 text-primary/70 hover:text-primary"
                    >
                      <FiX className="w-3 h-3" />
                    </button>
                  </span>
                )}
                
                {searchQuery && (
                  <span className="px-2 py-1 bg-primary/10 text-primary dark:text-primary-light text-xs rounded-md flex items-center">
                    Search: "{searchQuery}"
                    <button 
                      onClick={() => setSearchQuery('')}
                      className="ml-1 text-primary/70 hover:text-primary"
                    >
                      <FiX className="w-3 h-3" />
                    </button>
                  </span>
                )}
                
                <span className="text-sm text-gray-500 dark:text-gray-400 ml-2">
                  {filteredScripts.length} results
                </span>
              </div>
            )}
          </div>
        </section>
        
        {/* Featured Scripts Section */}
        {!activeSubcategory && !searchQuery && filterOS === 'all' && (
          <section className="mb-16">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-semibold text-gray-900 dark:text-white flex items-center gap-2">
                <FiStar className="text-yellow-500" />
                Featured Security Scripts
              </h2>
              
              <Link 
                href="/categories/security/all" 
                className="text-sm font-medium text-primary hover:underline inline-flex items-center gap-1"
              >
                View all <FiChevronRight className="w-4 h-4" />
              </Link>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {featuredScripts.map((script) => (
                <ScriptCard key={script.id} script={script} />
              ))}
            </div>
          </section>
        )}
        
        {/* Security Areas Section */}
        <section id="security-areas" className="mb-16">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-semibold text-gray-900 dark:text-white flex items-center gap-2">
              <FiShield className="text-primary" />
              Security Areas
            </h2>
            
            <div className="flex items-center gap-2">
              <button
                onClick={() => setShowRecommendations(!showRecommendations)}
                className="text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center gap-1 hover:text-primary dark:hover:text-primary-light"
              >
                {showRecommendations ? 'Hide' : 'Show'} Recommendations
                {showRecommendations ? (
                  <FiChevronUp className="w-4 h-4" />
                ) : (
                  <FiChevronDown className="w-4 h-4" />
                )}
              </button>
            </div>
          </div>
          
          <motion.div 
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
          >
            {securitySubcategories.map((subcategory) => {
              const levelStyles = getLevelStyles(subcategory.level);
              const isActive = activeSubcategory === subcategory.id;
              const matchingScripts = allScripts.filter(script => 
                script.tags.some(tag => subcategory.tags.includes(tag))
              ).length;
              
              return (
                <motion.div
                  key={subcategory.id}
                  variants={itemVariants}
                  className={`bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-sm border ${
                    isActive 
                      ? `${levelStyles.border} border-l-4` 
                      : 'border-gray-100 dark:border-gray-700'
                  } transition-all duration-200 hover:shadow-md ${
                    isActive ? 'ring-2 ring-offset-2 ' + levelStyles.ring : ''
                  }`}
                >
                  <div className="p-6">
                    <div className="flex items-start mb-4">
                      <div className={`w-12 h-12 rounded-lg ${levelStyles.bg} flex items-center justify-center ${levelStyles.text} mr-4`}>
                        {subcategory.icon}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center justify-between">
                          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-1">
                            {subcategory.name}
                          </h3>
                          <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${levelStyles.badge}`}>
                            {subcategory.level.charAt(0).toUpperCase() + subcategory.level.slice(1)}
                          </span>
                        </div>
                        <p className="text-sm text-gray-600 dark:text-gray-300 line-clamp-2">
                          {subcategory.description}
                        </p>
                      </div>
                    </div>
                    
                    <div className="flex flex-wrap gap-1.5 mb-4">
                      {subcategory.tags.slice(0, 3).map((tag) => (
                        <span 
                          key={tag}
                          className="px-2 py-0.5 bg-gray-100 dark:bg-gray-700 rounded-full text-xs text-gray-600 dark:text-gray-400"
                        >
                          {tag}
                        </span>
                      ))}
                      {subcategory.tags.length > 3 && (
                        <span className="px-2 py-0.5 bg-gray-100 dark:bg-gray-700 rounded-full text-xs text-gray-600 dark:text-gray-400">
                          +{subcategory.tags.length - 3}
                        </span>
                      )}
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <span className="text-xs text-gray-500 dark:text-gray-400">
                        {matchingScripts} scripts
                      </span>
                      
                      <button
                        onClick={() => toggleSubcategory(subcategory.id)}
                        className={`px-3 py-1 text-xs font-medium rounded-md inline-flex items-center gap-1 ${
                          isActive
                            ? `${levelStyles.badge}`
                            : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                        }`}
                      >
                        {isActive ? 'Selected' : 'Browse Scripts'}
                        {isActive ? <FiCheck className="w-3 h-3" /> : <FiChevronRight className="w-3 h-3" />}
                      </button>
                    </div>
                  </div>
                  
                  {/* Show recommended practice for each subcategory if recommendations are visible */}
                  {showRecommendations && (
                    <div className={`p-4 ${levelStyles.bg} border-t border-gray-100 dark:border-gray-700`}>
                      <div className="flex items-start gap-2">
                        <div className="mt-0.5">
                          <FiHelpCircle className={`w-4 h-4 ${levelStyles.text}`} />
                        </div>
                        <div>
                          <h4 className={`text-xs font-medium ${levelStyles.text} mb-1`}>
                            Best Practice
                          </h4>
                          <p className="text-xs text-gray-700 dark:text-gray-300">
                            {subcategory.id === 'hardening' && "Apply system hardening in stages, testing functionality after each change."}
                            {subcategory.id === 'firewalls' && "Implement default-deny policies and only allow necessary services."}
                            {subcategory.id === 'encryption' && "Use industry-standard encryption algorithms with proper key management."}
                            {subcategory.id === 'authentication' && "Enforce multi-factor authentication for all privileged accounts."}
                            {subcategory.id === 'monitoring' && "Centralize security logs and implement automated alerting for critical events."}
                            {subcategory.id === 'incident-response' && "Maintain documented incident response procedures and practice regularly."}
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
                </motion.div>
              );
            })}
          </motion.div>
        </section>
        
        {/* Script Listing Section */}
        <div ref={contentRef}>
          {(activeSubcategory || searchQuery || filterOS !== 'all') && (
            <section className="mb-16">
              <div className="flex items-center justify-between flex-wrap gap-4 mb-6">
                <h2 className="text-2xl font-semibold text-gray-900 dark:text-white">
                  {activeSubcategory 
                    ? `${securitySubcategories.find(s => s.id === activeSubcategory)?.name} Scripts` 
                    : "Security Scripts"}
                  {filteredScripts.length > 0 && ` (${filteredScripts.length})`}
                </h2>
                
                <div className="flex items-center gap-4">
                  {/* View mode selector */}
                  <div className="flex items-center bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md p-1">
                    <button
                      onClick={() => setViewMode('grid')}
                      className={`p-1.5 rounded ${
                        viewMode === 'grid'
                          ? 'bg-primary text-white'
                          : 'text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'
                      }`}
                      aria-label="Grid view"
                    >
                      <FiGrid className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => setViewMode('list')}
                      className={`p-1.5 rounded ${
                        viewMode === 'list'
                          ? 'bg-primary text-white'
                          : 'text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'
                      }`}
                      aria-label="List view"
                    >
                      <FiList className="w-4 h-4" />
                    </button>
                  </div>
                  
                  {/* Sort selector - could be expanded in a real implementation */}
                  <select 
                    className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300 text-sm rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-primary"
                    defaultValue="downloads"
                  >
                    <option value="downloads">Most Popular</option>
                    <option value="date">Newest First</option>
                    <option value="rating">Highest Rated</option>
                    <option value="name">Alphabetical</option>
                  </select>
                </div>
              </div>
              
              {filteredScripts.length > 0 ? (
                <motion.div
                  variants={containerVariants}
                  initial="hidden"
                  animate="visible"
                  className={viewMode === 'grid' 
                    ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6' 
                    : 'space-y-4'
                  }
                >
                  {filteredScripts.map((script) => (
                    <motion.div 
                      key={script.id}
                      variants={itemVariants}
                      whileHover={{ y: -5 }}
                      transition={{ type: "spring", stiffness: 300 }}
                    >
                      {viewMode === 'grid' ? (
                        <ScriptCard script={script} />
                      ) : (
                        <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-100 dark:border-gray-700 shadow-sm hover:shadow-md transition-all p-4">
                          <div className="flex flex-col md:flex-row md:items-center gap-4">
                            <div className="flex-1">
                              <div className="flex items-center justify-between mb-2">
                                <h3 className="font-medium text-gray-900 dark:text-white text-lg">
                                  <Link href={`/scripts/${script.id}`} className="hover:text-primary dark:hover:text-primary-light">
                                    {script.title}
                                  </Link>
                                </h3>
                                
                                <div className="flex items-center gap-2">
                                  <span className={`px-2 py-0.5 rounded-full text-xs ${
                                    script.os === 'linux' 
                                      ? 'bg-linux-green/10 text-linux-green'
                                      : script.os === 'windows'
                                        ? 'bg-windows-blue/10 text-windows-blue'
                                        : script.os === 'macos'
                                          ? 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
                                          : 'bg-purple-100 text-purple-700 dark:bg-purple-900/30 dark:text-purple-400'
                                  }`}>
                                    {script.os === 'linux' && '🐧 '}
                                    {script.os === 'windows' && '🪟 '}
                                    {script.os === 'macos' && '🍎 '}
                                    {script.os === 'cross-platform' && '🔄 '}
                                    {script.os.charAt(0).toUpperCase() + script.os.slice(1)}
                                  </span>
                                </div>
                              </div>
                              
                              <p className="text-sm text-gray-600 dark:text-gray-300 mb-2 line-clamp-2">
                                {script.description}
                              </p>
                              
                              <div className="flex flex-wrap gap-1.5 mb-3">
                                {script.tags.slice(0, 4).map((tag) => (
                                  <span 
                                    key={tag}
                                    className="px-2 py-0.5 bg-gray-100 dark:bg-gray-700 rounded-full text-xs text-gray-600 dark:text-gray-400"
                                  >
                                    {tag}
                                  </span>
                                ))}
                                {script.tags.length > 4 && (
                                  <span className="px-2 py-0.5 bg-gray-100 dark:bg-gray-700 rounded-full text-xs text-gray-600 dark:text-gray-400">
                                    +{script.tags.length - 4}
                                  </span>
                                )}
                              </div>
                              
                              <div className="flex items-center text-xs text-gray-500 dark:text-gray-400 gap-4">
                                <span className="flex items-center gap-1">
                                  <FiStar className="w-3 h-3 text-yellow-500" />
                                  {script.rating.toFixed(1)}
                                </span>
                                <span className="flex items-center gap-1">
                                  <FiDownload className="w-3 h-3" />
                                  {script.downloads.toLocaleString()}
                                </span>
                                <span className="flex items-center gap-1">
                                  <FiClock className="w-3 h-3" />
                                  {new Date(script.updatedAt).toLocaleDateString()}
                                </span>
                              </div>
                            </div>
                            
                            <div className="flex md:flex-col gap-2 md:justify-between md:items-end">
                              <Link 
                                href={`/scripts/${script.id}`}
                                className="px-4 py-2 bg-primary hover:bg-primary-dark text-white text-sm font-medium rounded-md transition-colors whitespace-nowrap"
                              >
                                View Script
                              </Link>
                              <button className="px-4 py-2 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 text-sm font-medium rounded-md transition-colors whitespace-nowrap">
                                Quick View
                              </button>
                            </div>
                          </div>
                        </div>
                      )}
                    </motion.div>
                  ))}
                </motion.div>
              ) : (
                <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-100 dark:border-gray-700 p-8 text-center">
                  <div className="w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4">
                    <FiSearch className="w-8 h-8 text-gray-500 dark:text-gray-400" />
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">No matching scripts found</h3>
                  <p className="text-gray-600 dark:text-gray-300 mb-4">
                    Try adjusting your search terms or filters to find what you're looking for.
                  </p>
                  <button
                    onClick={clearFilters}
                    className="px-4 py-2 bg-primary hover:bg-primary-dark text-white font-medium rounded-md transition-colors"
                  >
                    Clear All Filters
                  </button>
                </div>
              )}
            </section>
          )}
        </div>
        
        {/* Security Resources Section (toggle visibility) */}
        <section className="mb-16">
          <button
            onClick={() => setShowResources(!showResources)}
            className="w-full flex items-center justify-between bg-white dark:bg-gray-800 rounded-lg border border-gray-100 dark:border-gray-700 p-4 mb-4 hover:bg-gray-50 dark:hover:bg-gray-750 transition-colors"
          >
            <h2 className="text-xl font-semibold text-gray-900 dark:text-white flex items-center gap-2">
              <FiFileText className="text-primary" />
              Security Best Practices
            </h2>
            
            <span className={`transition-transform duration-200 ${showResources ? 'rotate-180' : ''}`}>
              <FiChevronDown className="w-5 h-5 text-gray-500 dark:text-gray-400" />
            </span>
          </button>
          
          <AnimatePresence>
            {showResources && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.3 }}
                className="bg-white dark:bg-gray-800 rounded-lg border border-gray-100 dark:border-gray-700 overflow-hidden"
              >
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 p-6">
                  {securityTips.map((tip, index) => (
                    <div 
                      key={index}
                      className="flex items-start gap-4 bg-gray-50 dark:bg-gray-750 p-4 rounded-lg"
                    >
                      <div className="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center text-primary dark:text-primary-light flex-shrink-0">
                        {tip.icon}
                      </div>
                      <div>
                        <h3 className="font-medium text-gray-900 dark:text-white mb-1">
                          {tip.title}
                        </h3>
                        <p className="text-sm text-gray-600 dark:text-gray-300">
                          {tip.description}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
                
                <div className="bg-gray-50 dark:bg-gray-750 p-4 border-t border-gray-100 dark:border-gray-700">
                  <div className="flex justify-between items-center">
                    <h3 className="font-medium text-gray-900 dark:text-white">Need more security guidance?</h3>
                    <Link 
                      href="/security-guides" 
                      className="px-4 py-2 bg-primary hover:bg-primary-dark text-white text-sm font-medium rounded-md transition-colors whitespace-nowrap"
                    >
                      View Security Guides
                    </Link>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </section>
        
        {/* Call to Action Section */}
        <section className="mb-16">
          <div className="bg-gradient-to-r from-primary/20 to-primary/5 dark:from-primary-dark/20 dark:to-primary-dark/5 rounded-xl overflow-hidden">
            <div className="p-8 md:p-12">
              <div className="flex flex-col md:flex-row items-center gap-8">
                <div className="md:w-2/3">
                  <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                    Contribute to Our Security Collection
                  </h2>
                  <p className="text-lg text-gray-700 dark:text-gray-200 mb-6">
                    Have a valuable security script? Share it with the community and help others secure their systems.
                  </p>
                  <div className="flex flex-wrap gap-4">
                    <Link 
                      href="/add-script" 
                      className="px-6 py-3 bg-primary hover:bg-primary-dark text-white font-medium rounded-md transition-colors"
                    >
                      Submit a Script
                    </Link>
                    <Link 
                      href="/guidelines" 
                      className="px-6 py-3 bg-white/70 dark:bg-gray-800/70 hover:bg-white dark:hover:bg-gray-800 text-gray-900 dark:text-white font-medium rounded-md transition-colors"
                    >
                      Read Submission Guidelines
                    </Link>
                  </div>
                </div>
                
                <div className="md:w-1/3 flex justify-center">
                  <div className="w-32 h-32 bg-white/20 dark:bg-white/5 backdrop-blur-sm rounded-full flex items-center justify-center">
                    <FiShield className="w-16 h-16 text-primary dark:text-primary-light" />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>
        
        {/* Security Categories Navigation */}
        <section className="mb-8">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
            Related Categories
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Link 
              href="/categories/system-admin"
              className="flex items-center gap-3 p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-100 dark:border-gray-700 shadow-sm hover:shadow-md hover:-translate-y-1 transition-all duration-200"
            >
              <div className="w-10 h-10 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center text-primary">
                <FiServer className="w-5 h-5" />
              </div>
              <div>
                <div className="font-medium text-gray-900 dark:text-white">System Admin</div>
                <div className="text-xs text-gray-500 dark:text-gray-400">System configuration & management</div>
              </div>
            </Link>
            
            <Link 
              href="/categories/networking"
              className="flex items-center gap-3 p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-100 dark:border-gray-700 shadow-sm hover:shadow-md hover:-translate-y-1 transition-all duration-200"
            >
              <div className="w-10 h-10 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center text-primary">
                <FiServer className="w-5 h-5" />
              </div>
              <div>
                <div className="font-medium text-gray-900 dark:text-white">Networking</div>
                <div className="text-xs text-gray-500 dark:text-gray-400">Network setup & troubleshooting</div>
              </div>
            </Link>
            
            <Link 
              href="/categories/monitoring"
              className="flex items-center gap-3 p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-100 dark:border-gray-700 shadow-sm hover:shadow-md hover:-translate-y-1 transition-all duration-200"
            >
              <div className="w-10 h-10 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center text-primary">
                <FiMonitor className="w-5 h-5" />
              </div>
              <div>
                <div className="font-medium text-gray-900 dark:text-white">Monitoring</div>
                <div className="text-xs text-gray-500 dark:text-gray-400">System performance & visibility</div>
              </div>
            </Link>
          </div>
        </section>
      </div>
    </>
  );
}