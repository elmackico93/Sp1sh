import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { Layout } from '../../components/layout/Layout';
import { getScriptById } from '../../lib/api';
import { useRouter } from 'next/router';
import { useEffect, useRef, useState } from 'react';
import Prism from 'prismjs';
import 'prismjs/components/prism-bash';
import 'prismjs/components/prism-powershell';
import { useScripts } from '../../context/ScriptsContext';
import { ScriptActions } from '../../components/scripts/ScriptActions';
import { ScriptCode } from '../../components/scripts/ScriptCode';
import { ScriptTags } from '../../components/scripts/ScriptTags';
import { ScriptMetadata } from '../../components/scripts/ScriptMetadata';
import { RelatedScripts } from '../../components/scripts/RelatedScripts';
import { ScriptComments } from '../../components/scripts/ScriptComments';
import { LoadingPlaceholder } from '../../components/ui/LoadingPlaceholder';
import { withStaticRendering } from '../../utils/renderStrategy';
import { getScriptById as getScriptByIdUtil, mockScripts } from '../../mocks/scripts';

export default function ScriptDetail({ initialData }) {
  const router = useRouter();
  const { id } = router.query;
  const [script, setScript] = useState(initialData || null);
  const [loading, setLoading] = useState(!initialData);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (!initialData && id) {
      setLoading(true);
      getScriptById(id)
        .then(data => {
          setScript(data);
          setLoading(false);
        })
        .catch(err => {
          setError('Failed to load script details');
          setLoading(false);
        });
    }
  }, [id, initialData]);

  return (
    <Layout title={`${script.title} | Sp1sh`} description={script.description}>

      <div className="container mx-auto px-4 py-8">
        <p className="text-lg text-center">Loading script details...</p>
      </div>
    </Layout>
  );

  return (
    <Layout title={`${script.title} | Sp1sh`} description={script.description}>

      <div className="container mx-auto px-4 py-8">
        <p className="text-lg text-center text-red-500">{error}</p>
      </div>
    </Layout>
  );

  return (
    <Layout title={`${script.title} | Sp1sh`} description={script.description}>

      <div className="container mx-auto px-4 py-8">
        <p className="text-lg text-center">Script not found</p>
      </div>
    </Layout>
  );

  return (
    <Layout title={`${script.title} | Sp1sh`} description={script.description}>

      title={`${script.title} | Sp1sh`}
      description={script.description || "Script details"}
    >
      <div className="container mx-auto px-4 py-8">
        <div className="bg-white shadow-md rounded-lg p-6">
          <h1 className="text-3xl font-bold mb-4">{script.title}</h1>
          
          <div className="mb-6">
            <p className="text-gray-700">{script.description}</p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <div>
              <h2 className="text-xl font-semibold mb-2">Details</h2>
              <p><span className="font-medium">OS:</span> {script.os}</p>
              <p><span className="font-medium">Category:</span> {script.category}</p>
              <p><span className="font-medium">Rating:</span> {script.rating}/5</p>
              <p><span className="font-medium">Downloads:</span> {script.downloads}</p>
            </div>
            
            <div>
              <h2 className="text-xl font-semibold mb-2">Author</h2>
              <p><span className="font-medium">Name:</span> {script.authorName}</p>
              <p><span className="font-medium">Username:</span> {script.authorUsername}</p>
            </div>
          </div>
          
          <div>
            <h2 className="text-xl font-semibold mb-2">Script Code</h2>
            <pre className="bg-gray-100 p-4 rounded overflow-x-auto">
              <code>{script.code}</code>
            </pre>
          </div>
        </div>
      </div>
    </Layout>
  );
}


