import { debounce } from 'lodash';

// Set a 150ms debounce delay for smooth real-time search
export const debouncedSearch = debounce((
  searchTerm: string,
  callback: (results: any[]) => void,
  searchFunction: (term: string) => Promise<any[]>
) => {
  if (searchTerm.length < 2) {
    callback([]);
    return;
  }
  
  searchFunction(searchTerm)
    .then(results => {
      callback(results);
    })
    .catch(err => {
      console.error('Search error:', err);
      callback([]);
    });
}, 150);

// Highlight matching text in search results
export const highlightMatch = (text: string, query: string): { parts: Array<{ text: string; isMatch: boolean }> } => {
  if (!query.trim()) {
    return { parts: [{ text, isMatch: false }] };
  }
  
  const escapedQuery = query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  const regex = new RegExp(`(${escapedQuery})`, 'gi');
  const parts = text.split(regex);
  
  return {
    parts: parts.map((part) => ({
      text: part,
      isMatch: part.toLowerCase() === query.toLowerCase()
    }))
  };
};

// Group search results by categories
export const groupResultsByCategory = (results: any[]) => {
  return results.reduce((groups: Record<string, any[]>, item) => {
    const category = item.category || 'other';
    if (!groups[category]) {
      groups[category] = [];
    }
    groups[category].push(item);
    return groups;
  }, {});
};

// Add keyboard navigation support for search results
export const useKeyboardNavigation = (
  resultsLength: number,
  isOpen: boolean,
  setHighlightedIndex: (index: number) => void,
  highlightedIndex: number,
  onSelect: (index: number) => void,
  onClose: () => void
) => {
  const handleKeyDown = (e: KeyboardEvent) => {
    if (!isOpen || resultsLength === 0) return;
    
    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setHighlightedIndex((highlightedIndex + 1) % resultsLength);
        break;
      case 'ArrowUp':
        e.preventDefault();
        setHighlightedIndex((highlightedIndex - 1 + resultsLength) % resultsLength);
        break;
      case 'Enter':
        if (highlightedIndex >= 0) {
          e.preventDefault();
          onSelect(highlightedIndex);
        }
        break;
      case 'Escape':
        e.preventDefault();
        onClose();
        break;
    }
  };
  
  return handleKeyDown;
};
